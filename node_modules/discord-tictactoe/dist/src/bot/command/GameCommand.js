"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const InteractionMessagingTunnel_1 = __importDefault(require("../messaging/InteractionMessagingTunnel"));
const TextMessagingTunnel_1 = __importDefault(require("../messaging/TextMessagingTunnel"));
const localize_1 = __importDefault(require("../../i18n/localize"));
const discord_js_1 = require("discord.js");
class GameCommand {
    constructor(manager) {
        this.manager = manager;
        this.config = manager.bot.configuration;
    }
    handleMessage(message, noTrigger = false) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (message.member &&
                !message.author.bot &&
                message.channel instanceof discord_js_1.TextChannel &&
                (noTrigger || (this.config.command && message.content.startsWith(this.config.command)))) {
                const tunnel = new TextMessagingTunnel_1.default(message);
                const invited = (_a = message.mentions.members) === null || _a === void 0 ? void 0 : _a.first();
                return this.handleInvitation(tunnel, message.member, invited);
            }
        });
    }
    handleInteraction(client, interaction, noTrigger = false) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (noTrigger ||
                (interaction.data.type === 1 && interaction.data.name === this.config.slashCommand)) {
                const channel = client.channels.cache.get(interaction.channel_id);
                const guild = client.guilds.cache.get(interaction.guild_id);
                if (guild && channel instanceof discord_js_1.TextChannel) {
                    const inviter = yield guild.members.fetch(interaction.member.user.id);
                    const tun = new InteractionMessagingTunnel_1.default(interaction, client, inviter, channel);
                    const invited = interaction.data.options
                        ? yield guild.members.fetch((_a = interaction.data.options[0]) === null || _a === void 0 ? void 0 : _a.value)
                        : undefined;
                    return this.handleInvitation(tun, inviter, invited);
                }
            }
        });
    }
    handleInvitation(tunnel, inviter, invited) {
        return __awaiter(this, void 0, void 0, function* () {
            if (invited) {
                if (!invited.user.bot &&
                    inviter.user.id !== invited.user.id &&
                    invited.permissionsIn(tunnel.channel).has('VIEW_CHANNEL')) {
                    yield this.manager.requestDuel(tunnel, invited);
                }
                else {
                    yield tunnel.replyWith(localize_1.default.__('duel.unknown-user'), true);
                }
            }
            else {
                yield this.manager.createGame(tunnel);
            }
        });
    }
}
exports.default = GameCommand;
