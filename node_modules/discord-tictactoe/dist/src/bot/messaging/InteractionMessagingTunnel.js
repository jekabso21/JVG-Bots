"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const MessagingTunnel_1 = __importDefault(require("./MessagingTunnel"));
class InteractionMessagingTunnel extends MessagingTunnel_1.default {
    constructor(interaction, client, author, channel) {
        super();
        this.interaction = interaction;
        this.client = client;
        this._author = author;
        this._channel = channel;
    }
    get author() {
        return this._author;
    }
    get channel() {
        return this._channel;
    }
    get reply() {
        return this._reply;
    }
    replyWith(answer, _direct) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.reply) {
                yield this.editReply(answer);
                return this.reply;
            }
            yield this.api.interactions(this.interaction.id, this.interaction.token).callback.post({
                data: {
                    type: 4,
                    data: this.formatDiscordAPIData(answer)
                }
            });
            const messageId = (yield this.api
                .webhooks(this.interaction.application_id, this.interaction.token)
                .messages('@original')
                .get()).id;
            this._reply = yield this.channel.messages.fetch(messageId);
            return this._reply;
        });
    }
    editReply(answer) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.reply) {
                yield this.api
                    .webhooks(this.interaction.application_id, this.interaction.token)
                    .messages('@original')
                    .patch({ data: this.formatDiscordAPIData(answer) });
            }
        });
    }
    end(reason) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.reply) {
                try {
                    yield this.editReply(reason !== null && reason !== void 0 ? reason : '.');
                    yield this.reply.suppressEmbeds(true);
                    yield this.reply.reactions.removeAll();
                }
                catch (_a) {
                }
            }
        });
    }
    get api() {
        return this.client['api'];
    }
    formatDiscordAPIData(answer) {
        const embed = answer.embed;
        return embed ? { embeds: [embed] } : { content: answer };
    }
}
exports.default = InteractionMessagingTunnel;
