"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
const localize_1 = __importDefault(require("../../i18n/localize"));
class DuelRequest {
    constructor(manager, tunnel, invited, expireTime) {
        this.manager = manager;
        this.tunnel = tunnel;
        this.invited = invited;
        this.expireTime = expireTime !== null && expireTime !== void 0 ? expireTime : 60;
    }
    get embed() {
        var _a;
        const content = localize_1.default.__('duel.challenge', {
            invited: this.invited.toString(),
            initier: (0, util_1.formatDiscordName)((_a = this.tunnel.author.displayName) !== null && _a !== void 0 ? _a : '')
        }) +
            '\n' +
            localize_1.default.__('duel.action');
        return {
            color: 2719929,
            title: localize_1.default.__('duel.title'),
            description: content
        };
    }
    attachTo(message) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const reaction of DuelRequest.REACTIONS) {
                yield message.react(reaction);
            }
            message
                .awaitReactions((reaction, user) => {
                return (DuelRequest.REACTIONS.includes(reaction.emoji.name) &&
                    user.id === this.invited.id);
            }, { max: 1, time: this.expireTime * 1000, errors: ['time'] })
                .then(this.challengeAnswered.bind(this))
                .catch(this.challengeExpired.bind(this));
        });
    }
    challengeAnswered(collected) {
        return __awaiter(this, void 0, void 0, function* () {
            if (collected.first().emoji.name === DuelRequest.REACTIONS[0]) {
                yield this.tunnel.end();
                yield this.manager.createGame(this.tunnel, this.invited);
            }
            else {
                yield this.tunnel.end(localize_1.default.__('duel.reject', { invited: (0, util_1.formatDiscordName)(this.invited.displayName) }));
            }
        });
    }
    challengeExpired() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.tunnel.end(localize_1.default.__('duel.expire', { invited: (0, util_1.formatDiscordName)(this.invited.displayName) }));
        });
    }
}
exports.default = DuelRequest;
DuelRequest.REACTIONS = ['üëç', 'üëé'];
